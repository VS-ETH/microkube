/*
 * Copyright 2018 The microkube authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package main

import (
	"bytes"
	"flag"
	log "github.com/sirupsen/logrus"
	"io"
	"io/ioutil"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/runtime/serializer/json"
	"k8s.io/client-go/kubernetes/scheme"
	"os"
	"strconv"
	"strings"
)

func main() {
	pkgArg := flag.String("package", "", "Package that the generated sources should be placed in")
	nameArg := flag.String("name", "", "Name of the type to generate")
	srcArg := flag.String("src", "", "YAML manifest to parse")
	dstArg := flag.String("dest", "", "Destination of source file")
	dstMainArg := flag.String("main", "", "Destination of main file (optional)")
	mainPkgBase := flag.String("package-base", "github.com/uubk/microkube/pkg", "Destination of main file (optional)")

	flag.Parse()

	if *pkgArg == "" || *srcArg == "" || *nameArg == "" {
		flag.PrintDefaults()
		log.WithFields(log.Fields{
			"pkg": *pkgArg,
			"src": *srcArg,
			"dst": *dstArg,
		}).Fatal("Required parameter missing!")
	}

	cg := ManifestCodegen{
		source:      *srcArg,
		pkg:         *pkgArg,
		name:        *nameArg,
		dst:         *dstArg,
		mainDest:    *dstMainArg,
		mainPkgBase: *mainPkgBase,
	}
	err := cg.ParseFile()
	if err != nil {
		log.WithError(err).Fatal("Couldn't load file!")
	}

}

type ManifestCodegen struct {
	source        string
	pkg           string
	currentOutput io.Writer
	entries       []fileEntry
	name          string
	dst           string
	mainDest      string
	mainPkgBase   string
}

type fileEntry struct {
	obj  runtime.Object
	gv   schema.GroupVersion
	name string
}

func (m *ManifestCodegen) ParseFile() error {
	fileIn, err := os.Open(m.source)
	if err != nil {
		return err
	}
	defer fileIn.Close()

	buf, err := ioutil.ReadAll(fileIn)
	if err != nil {
		return err
	}
	parts := strings.Split(string(buf), "---")
	log.Info("Detected a " + strconv.Itoa(len(parts)) + " part document")

	for _, doc := range parts {
		err = m.parseDoc(doc)
		if err != nil {
			return err
		}
	}

	fd, err := os.OpenFile(m.dst, os.O_WRONLY|os.O_TRUNC|os.O_CREATE, 0644)
	defer fd.Close()
	if err != nil {
		return err
	}
	m.currentOutput = fd

	err = m.writeFile()
	if err != nil {
		return err
	}

	if m.mainDest != "" {
		fd, err = os.OpenFile(m.mainDest, os.O_WRONLY|os.O_TRUNC|os.O_CREATE, 0644)
		defer fd.Close()
		if err != nil {
			return err
		}
		m.currentOutput = fd
		m.writeMainFile()
	}

	return nil
}

func (m *ManifestCodegen) parseDoc(doc string) error {
	decodeFun := scheme.Codecs.UniversalDeserializer().Decode
	obj, gvk, err := decodeFun([]byte(doc), nil, nil)
	if err != nil {
		return err
	}

	m.entries = append(m.entries, fileEntry{
		obj:  obj,
		gv:   gvk.GroupVersion(),
		name: "kobjS" + m.name + "O" + strconv.Itoa(len(m.entries)),
	})

	return nil
}

func (m *ManifestCodegen) writeMainFile() error {
	bufWriter := bytes.Buffer{}

	bufWriter.WriteString(`/*
 * THIS FILE IS AUTOGENERATED by github.com/uubk/microkube/cmd/codegen/Manifest.go
 * DO NOT TOUCH.
 * In case of issues, please fix the code generator ;)
 */

package main

import (
	"`)
	bufWriter.WriteString(m.mainPkgBase + "/" + m.pkg)
	bufWriter.WriteString(`"
)

func main() {
	obj := `)
	bufWriter.WriteString(m.pkg + ".New" + m.name)
	bufWriter.WriteString(`()
	obj.DoStuff()
}
`)
	_, err := bufWriter.WriteTo(m.currentOutput)
	return err
}

func (m *ManifestCodegen) writeFile() error {
	bufWriter := bytes.Buffer{}

	bufWriter.WriteString(`/*
 * THIS FILE IS AUTOGENERATED by github.com/uubk/microkube/cmd/codegen/Manifest.go
 * DO NOT TOUCH.
 * In case of issues, please fix the code generator ;)
 */

`)
	bufWriter.WriteString("package " + m.pkg)
	bufWriter.WriteString("\n\n")
	if m.mainPkgBase+"/"+m.pkg != "github.com/uubk/microkube/pkg/manifests" {
		bufWriter.WriteString(`import (
	"github.com/uubk/microkube/pkg/manifests"
)

`)
	}

	serializer := json.Serializer{}
	for _, entry := range m.entries {
		bufWriter.Write([]byte("var " + entry.name + " = `"))

		// Encode the whole thing to JSON
		encoder := scheme.Codecs.EncoderForVersion(&serializer, entry.gv)
		err := encoder.Encode(entry.obj, &bufWriter)
		if err != nil {
			return nil
		}
		// Remove spurious newline
		buf := bufWriter.Bytes()
		if buf[len(buf)-1] == '\n' {
			bufWriter.Truncate(len(buf) - 1)
		}

		bufWriter.Write([]byte("`\n"))
		if err != nil {
			return nil
		}
	}

	m.name = strings.Title(m.name)

	bufWriter.WriteString("\n")
	bufWriter.WriteString("type " + m.name + ` struct {
	`)
	if m.mainPkgBase+"/"+m.pkg != "github.com/uubk/microkube/pkg/manifests" {
		bufWriter.WriteString("manifests.")
	}
	bufWriter.WriteString(`KubeManifestBase
}

func New` + m.name + `() (*` + m.name + `) {
	obj := &` + m.name + ` {}

`)

	for _, entry := range m.entries {
		bufWriter.WriteString(`	obj.Register(` + entry.name + ")\n")
	}

	bufWriter.WriteString(`
	return obj
}
`)

	_, err := bufWriter.WriteTo(m.currentOutput)
	return err
}
