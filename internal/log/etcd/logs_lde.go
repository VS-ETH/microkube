/*
 This file was autogenerated via
 ----------------------------------------------------
 ldetool generate --package etcd --go-string logs.lde
 ----------------------------------------------------
 do not touch it with bare hands!
*/

package etcd

import (
	"strings"
)

var bslashN = "\n"
var colonSpace = ": "
var space = " "
var spaceBarSpace = " | "

// ETCDLogLine ...
type ETCDLogLine struct {
	rest      string
	Date      string
	Time      string
	Severity  string
	Component string
	Message   string
}

// Extract ...
func (p *ETCDLogLine) Extract(line string) (bool, error) {
	p.rest = line
	var pos int

	// Take until " " as Date(string)
	pos = strings.Index(p.rest, space)
	if pos >= 0 {
		p.Date = p.rest[:pos]
		p.rest = p.rest[pos+len(space):]
	} else {
		return false, nil
	}

	// Take until " " as Time(string)
	pos = strings.Index(p.rest, space)
	if pos >= 0 {
		p.Time = p.rest[:pos]
		p.rest = p.rest[pos+len(space):]
	} else {
		return false, nil
	}

	// Take until " | " as Severity(string)
	pos = strings.Index(p.rest, spaceBarSpace)
	if pos >= 0 {
		p.Severity = p.rest[:pos]
		p.rest = p.rest[pos+len(spaceBarSpace):]
	} else {
		return false, nil
	}

	// Take until ": " as Component(string)
	pos = strings.Index(p.rest, colonSpace)
	if pos >= 0 {
		p.Component = p.rest[:pos]
		p.rest = p.rest[pos+len(colonSpace):]
	} else {
		return false, nil
	}

	// Take until "\n" as Message(string)
	pos = strings.Index(p.rest, bslashN)
	if pos >= 0 {
		p.Message = p.rest[:pos]
		p.rest = p.rest[pos+len(bslashN):]
	} else {
		return false, nil
	}

	return true, nil
}
